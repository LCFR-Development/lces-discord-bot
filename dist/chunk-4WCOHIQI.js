/* Optimized production build generated by CommandKit */
import {
  getCommandFailedToRunEmbed_default
} from "./chunk-BRHHUFTO.js";
import {
  getMessageLoadingEmbed_default
} from "./chunk-MHOVOFEL.js";
import {
  getConfig
} from "./chunk-WAXFPYI6.js";
import {
  MActivityCheck
} from "./chunk-KA7H37RO.js";
import {
  __name
} from "./chunk-4HQ2LG3N.js";

// src/subcommands/activity-test/src/find.ts
import { ButtonKit } from "commandkit";
import { ActionRowBuilder, ButtonStyle, Collection, EmbedBuilder } from "discord.js";
import * as ms from "@lukeed/ms";
import { v4 as uuid } from "uuid";
async function find_default({ interaction }) {
  await interaction.deferReply({ ephemeral: true });
  const config = getConfig(interaction);
  if (!interaction.inCachedGuild())
    return;
  const id = interaction.options.getString("id");
  const document = await MActivityCheck.findOne({ ID: id });
  if (!document) {
    await interaction.followUp({ embeds: [getCommandFailedToRunEmbed_default("Activity Check not found.")] });
    return;
  }
  const deadlineTimestamp = Math.floor(new Date(document.deadline).getTime() / 1e3);
  const activityCheckEmbed = new EmbedBuilder().setTitle("Activity Check:").addFields(
    { name: "ID", value: document.ID },
    { name: "Created by", value: `<@!${document.createdBy}>
${(await interaction.guild?.members.fetch(document.createdBy))?.user?.username}` },
    { name: `Deadline`, value: `<t:${deadlineTimestamp}:f>` }
  ).setColor("DarkRed");
  const inactiveButton = new ButtonKit().setLabel("Show inactive employees").setStyle(ButtonStyle.Danger).setCustomId(uuid());
  const devInfoButton = new ButtonKit().setLabel("Dev info").setStyle(ButtonStyle.Primary).setCustomId(uuid());
  const mainRow = new ActionRowBuilder().setComponents([inactiveButton, devInfoButton]);
  const mainMessage = await interaction.followUp({ embeds: [activityCheckEmbed], components: [mainRow], fetchReply: true });
  await interaction.guild?.members.fetch();
  inactiveButton.onClick(
    async (subInteraction) => {
      await subInteraction.deferReply({ ephemeral: true });
      await subInteraction.editReply({ embeds: [getMessageLoadingEmbed_default("Getting members...", config)] });
      const membersOnLoa = (await interaction.guild?.roles.fetch(config?.roles.loaRole))?.members ?? new Collection();
      const reactedMembers = (await interaction.guild?.roles.fetch(config?.roles.reactedToActivityTest))?.members ?? new Collection();
      const employees = (await interaction.guild?.roles.fetch(config?.roles.employeeRole))?.members ?? new Collection();
      const inactiveMembers = new Collection();
      for (const [id2, member] of interaction.guild.members.cache) {
        if (!member.user.bot && employees.has(id2) && !membersOnLoa.has(id2) && !reactedMembers.has(id2)) {
          inactiveMembers.set(id2, member);
        }
      }
      let inactiveMembersString = "";
      if (inactiveMembers.size > 0) {
        for (const [id2, member] of inactiveMembers) {
          let username = member.user.username ?? "No username found";
          inactiveMembersString += `<@!${id2}> (${username})
`;
        }
      } else {
        inactiveMembersString = "No inactive members!";
      }
      const inactiveMembersEmbed = new EmbedBuilder().setDescription(inactiveMembersString).setColor("Blue");
      await subInteraction.followUp({ embeds: [inactiveMembersEmbed] });
    },
    {
      message: mainMessage,
      time: ms.parse("1m")
    }
  );
  devInfoButton.onClick(
    async (subInteraction) => {
      const devInfoEmbed = new EmbedBuilder().setFields(
        { name: "Doc ID", value: document.id },
        { name: "ID", value: document.ID },
        { name: "buttonID", value: document.buttonID },
        { name: "createdBy", value: document.createdBy },
        { name: "Deadline", value: document.deadline + `
(${new Date(document.deadline).getTime()})` }
      ).setColor("Blurple");
      const reactedMembersButton = new ButtonKit().setLabel("Reacted employees").setStyle(ButtonStyle.Secondary).setCustomId(uuid());
      const devInfoMessage = await subInteraction.reply({
        ephemeral: true,
        embeds: [devInfoEmbed],
        components: [new ActionRowBuilder({ components: [reactedMembersButton] })],
        fetchReply: true
      });
      reactedMembersButton.onClick(
        async (subSubInteraction) => {
          let reactedMembersString = "";
          for (const memberID of document.employeesReacted) {
            let username = interaction.guild?.members.cache.get(memberID)?.user.username ?? "No username found";
            reactedMembersString += `<@!${memberID}> (${username})
`;
          }
          const plainReactedMembersEmbed = new EmbedBuilder().setDescription(reactedMembersString || "No members reacted.").setColor("Grey");
          await subSubInteraction.reply({ ephemeral: true, embeds: [plainReactedMembersEmbed] });
        },
        {
          message: devInfoMessage,
          time: ms.parse("1m")
        }
      );
    },
    {
      message: mainMessage,
      time: ms.parse("1m")
    }
  );
}
__name(find_default, "default");

export {
  find_default
};
